import { z } from 'zod';

/**
 * Enum of all Chrome Extension APIs
 */
export enum ChromeApi {
  ACCESSIBILITY_FEATURES = 'accessibilityFeatures',
  ACTION = 'action',
  ALARMS = 'alarms',
  AUDIO = 'audio',
  BOOKMARKS = 'bookmarks',
  BROWSING_DATA = 'browsingData',
  CERTIFICATE_PROVIDER = 'certificateProvider',
  COMMANDS = 'commands',
  CONTENT_SETTINGS = 'contentSettings',
  CONTEXT_MENUS = 'contextMenus',
  COOKIES = 'cookies',
  DEBUGGER = 'debugger',
  DECLARATIVE_CONTENT = 'declarativeContent',
  DECLARATIVE_NET_REQUEST = 'declarativeNetRequest',
  DESKTOP_CAPTURE = 'desktopCapture',
  DEVTOOLS_INSPECTED_WINDOW = 'devtools.inspectedWindow',
  DEVTOOLS_NETWORK = 'devtools.network',
  DEVTOOLS_PANELS = 'devtools.panels',
  DEVTOOLS_PERFORMANCE = 'devtools.performance',
  DEVTOOLS_RECORDER = 'devtools.recorder',
  DNS = 'dns',
  DOCUMENT_SCAN = 'documentScan',
  DOM = 'dom',
  DOWNLOADS = 'downloads',
  ENTERPRISE_DEVICE_ATTRIBUTES = 'enterprise.deviceAttributes',
  ENTERPRISE_HARDWARE_PLATFORM = 'enterprise.hardwarePlatform',
  ENTERPRISE_NETWORKING_ATTRIBUTES = 'enterprise.networkingAttributes',
  ENTERPRISE_PLATFORM_KEYS = 'enterprise.platformKeys',
  EVENTS = 'events',
  EXTENSION = 'extension',
  EXTENSION_TYPES = 'extensionTypes',
  FILE_BROWSER_HANDLER = 'fileBrowserHandler',
  FILE_SYSTEM_PROVIDER = 'fileSystemProvider',
  FONT_SETTINGS = 'fontSettings',
  GCM = 'gcm',
  HISTORY = 'history',
  I18N = 'i18n',
  IDENTITY = 'identity',
  IDLE = 'idle',
  INPUT_IME = 'input.ime',
  INSTANCE_ID = 'instanceID',
  LOGIN_STATE = 'loginState',
  MANAGEMENT = 'management',
  NOTIFICATIONS = 'notifications',
  OFFSCREEN = 'offscreen',
  OMNIBOX = 'omnibox',
  PAGE_CAPTURE = 'pageCapture',
  PERMISSIONS = 'permissions',
  PLATFORM_KEYS = 'platformKeys',
  POWER = 'power',
  PRINTER_PROVIDER = 'printerProvider',
  PRINTING = 'printing',
  PRINTING_METRICS = 'printingMetrics',
  PRIVACY = 'privacy',
  PROCESSES = 'processes',
  PROXY = 'proxy',
  READING_LIST = 'readingList',
  RUNTIME = 'runtime',
  SCRIPTING = 'scripting',
  SEARCH = 'search',
  SESSIONS = 'sessions',
  SIDE_PANEL = 'sidePanel',
  STORAGE = 'storage',
  SYSTEM_CPU = 'system.cpu',
  SYSTEM_DISPLAY = 'system.display',
  SYSTEM_MEMORY = 'system.memory',
  SYSTEM_STORAGE = 'system.storage',
  SYSTEM_LOG = 'systemLog',
  TAB_CAPTURE = 'tabCapture',
  TAB_GROUPS = 'tabGroups',
  TABS = 'tabs',
  TOP_SITES = 'topSites',
  TTS = 'tts',
  TTS_ENGINE = 'ttsEngine',
  TYPES = 'types',
  USER_SCRIPTS = 'userScripts',
  VPN_PROVIDER = 'vpnProvider',
  WALLPAPER = 'wallpaper',
  WEB_AUTHENTICATION_PROXY = 'webAuthenticationProxy',
  WEB_NAVIGATION = 'webNavigation',
  WEB_REQUEST = 'webRequest',
  WINDOWS = 'windows',
}

/**
 * Supported platforms for Chrome APIs
 */
export const ChromePlatformSchema = z.enum(['all', 'chromeos']);
export type ChromePlatform = z.infer<typeof ChromePlatformSchema>;

/**
 * Channel requirements for Chrome APIs
 */
export const ChromeChannelSchema = z.enum(['stable', 'dev']);
export type ChromeChannel = z.infer<typeof ChromeChannelSchema>;

/**
 * Context where the API can run
 */
export const ChromeContextSchema = z.enum(['background', 'content', 'devtools', 'all']);
export type ChromeContext = z.infer<typeof ChromeContextSchema>;

/**
 * Metadata for each Chrome API
 */
export const ChromeApiMetadataSchema = z.object({
  /** Minimum Chrome version required */
  minChromeVersion: z.number().optional(),
  /** Platform restrictions */
  platform: ChromePlatformSchema,
  /** Channel requirement */
  channel: ChromeChannelSchema,
  /** Manifest version requirement (2, 3, or both) */
  manifestVersions: z.array(z.literal(2).or(z.literal(3))),
  /** Whether this API requires enterprise policy */
  requiresPolicy: z.boolean(),
  /** Whether this API is foreground only */
  foregroundOnly: z.boolean(),
  /** Contexts where this API can run */
  contexts: z.array(ChromeContextSchema),
  /** API namespace in chrome object */
  namespace: z.string(),
});

export type ChromeApiMetadata = z.infer<typeof ChromeApiMetadataSchema>;

/**
 * Registry of all Chrome APIs with their metadata
 */
export const CHROME_API_REGISTRY = {
  [ChromeApi.ACCESSIBILITY_FEATURES]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'accessibilityFeatures',
  },
  [ChromeApi.ACTION]: {
    minChromeVersion: 88,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'action',
  },
  [ChromeApi.ALARMS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'alarms',
  },
  [ChromeApi.AUDIO]: {
    minChromeVersion: 59,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'audio',
  },
  [ChromeApi.BOOKMARKS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background', 'content'],
    namespace: 'bookmarks',
  },
  [ChromeApi.BROWSING_DATA]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'browsingData',
  },
  [ChromeApi.CERTIFICATE_PROVIDER]: {
    minChromeVersion: 46,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'certificateProvider',
  },
  [ChromeApi.COMMANDS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'commands',
  },
  [ChromeApi.CONTENT_SETTINGS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'contentSettings',
  },
  [ChromeApi.CONTEXT_MENUS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'contextMenus',
  },
  [ChromeApi.COOKIES]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background', 'content'],
    namespace: 'cookies',
  },
  [ChromeApi.DEBUGGER]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'debugger',
  },
  [ChromeApi.DECLARATIVE_CONTENT]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'declarativeContent',
  },
  [ChromeApi.DECLARATIVE_NET_REQUEST]: {
    minChromeVersion: 84,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'declarativeNetRequest',
  },
  [ChromeApi.DESKTOP_CAPTURE]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'desktopCapture',
  },
  [ChromeApi.DEVTOOLS_INSPECTED_WINDOW]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['devtools'],
    namespace: 'devtools.inspectedWindow',
  },
  [ChromeApi.DEVTOOLS_NETWORK]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['devtools'],
    namespace: 'devtools.network',
  },
  [ChromeApi.DEVTOOLS_PANELS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['devtools'],
    namespace: 'devtools.panels',
  },
  [ChromeApi.DEVTOOLS_PERFORMANCE]: {
    minChromeVersion: 129,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['devtools'],
    namespace: 'devtools.performance',
  },
  [ChromeApi.DEVTOOLS_RECORDER]: {
    minChromeVersion: 105,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['devtools'],
    namespace: 'devtools.recorder',
  },
  [ChromeApi.DNS]: {
    platform: 'all',
    channel: 'dev',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'dns',
  },
  [ChromeApi.DOCUMENT_SCAN]: {
    minChromeVersion: 44,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'documentScan',
  },
  [ChromeApi.DOM]: {
    minChromeVersion: 88,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['content'],
    namespace: 'dom',
  },
  [ChromeApi.DOWNLOADS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'downloads',
  },
  [ChromeApi.ENTERPRISE_DEVICE_ATTRIBUTES]: {
    minChromeVersion: 46,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: true,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'enterprise.deviceAttributes',
  },
  [ChromeApi.ENTERPRISE_HARDWARE_PLATFORM]: {
    minChromeVersion: 71,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: true,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'enterprise.hardwarePlatform',
  },
  [ChromeApi.ENTERPRISE_NETWORKING_ATTRIBUTES]: {
    minChromeVersion: 85,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: true,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'enterprise.networkingAttributes',
  },
  [ChromeApi.ENTERPRISE_PLATFORM_KEYS]: {
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: true,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'enterprise.platformKeys',
  },
  [ChromeApi.EVENTS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['all'],
    namespace: 'events',
  },
  [ChromeApi.EXTENSION]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['all'],
    namespace: 'extension',
  },
  [ChromeApi.EXTENSION_TYPES]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['all'],
    namespace: 'extensionTypes',
  },
  [ChromeApi.FILE_BROWSER_HANDLER]: {
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: true,
    contexts: ['background'],
    namespace: 'fileBrowserHandler',
  },
  [ChromeApi.FILE_SYSTEM_PROVIDER]: {
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'fileSystemProvider',
  },
  [ChromeApi.FONT_SETTINGS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'fontSettings',
  },
  [ChromeApi.GCM]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'gcm',
  },
  [ChromeApi.HISTORY]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background', 'content'],
    namespace: 'history',
  },
  [ChromeApi.I18N]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['all'],
    namespace: 'i18n',
  },
  [ChromeApi.IDENTITY]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'identity',
  },
  [ChromeApi.IDLE]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'idle',
  },
  [ChromeApi.INPUT_IME]: {
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'input.ime',
  },
  [ChromeApi.INSTANCE_ID]: {
    minChromeVersion: 44,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'instanceID',
  },
  [ChromeApi.LOGIN_STATE]: {
    minChromeVersion: 78,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'loginState',
  },
  [ChromeApi.MANAGEMENT]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'management',
  },
  [ChromeApi.NOTIFICATIONS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'notifications',
  },
  [ChromeApi.OFFSCREEN]: {
    minChromeVersion: 109,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'offscreen',
  },
  [ChromeApi.OMNIBOX]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'omnibox',
  },
  [ChromeApi.PAGE_CAPTURE]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'pageCapture',
  },
  [ChromeApi.PERMISSIONS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background', 'content'],
    namespace: 'permissions',
  },
  [ChromeApi.PLATFORM_KEYS]: {
    minChromeVersion: 45,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'platformKeys',
  },
  [ChromeApi.POWER]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'power',
  },
  [ChromeApi.PRINTER_PROVIDER]: {
    minChromeVersion: 44,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'printerProvider',
  },
  [ChromeApi.PRINTING]: {
    minChromeVersion: 81,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'printing',
  },
  [ChromeApi.PRINTING_METRICS]: {
    minChromeVersion: 79,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: true,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'printingMetrics',
  },
  [ChromeApi.PRIVACY]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'privacy',
  },
  [ChromeApi.PROCESSES]: {
    platform: 'all',
    channel: 'dev',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'processes',
  },
  [ChromeApi.PROXY]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'proxy',
  },
  [ChromeApi.READING_LIST]: {
    minChromeVersion: 120,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'readingList',
  },
  [ChromeApi.RUNTIME]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['all'],
    namespace: 'runtime',
  },
  [ChromeApi.SCRIPTING]: {
    minChromeVersion: 88,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'scripting',
  },
  [ChromeApi.SEARCH]: {
    minChromeVersion: 87,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'search',
  },
  [ChromeApi.SESSIONS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'sessions',
  },
  [ChromeApi.SIDE_PANEL]: {
    minChromeVersion: 114,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'sidePanel',
  },
  [ChromeApi.STORAGE]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['all'],
    namespace: 'storage',
  },
  [ChromeApi.SYSTEM_CPU]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'system.cpu',
  },
  [ChromeApi.SYSTEM_DISPLAY]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'system.display',
  },
  [ChromeApi.SYSTEM_MEMORY]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'system.memory',
  },
  [ChromeApi.SYSTEM_STORAGE]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'system.storage',
  },
  [ChromeApi.SYSTEM_LOG]: {
    minChromeVersion: 125,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: true,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'systemLog',
  },
  [ChromeApi.TAB_CAPTURE]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'tabCapture',
  },
  [ChromeApi.TAB_GROUPS]: {
    minChromeVersion: 89,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'tabGroups',
  },
  [ChromeApi.TABS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background', 'content'],
    namespace: 'tabs',
  },
  [ChromeApi.TOP_SITES]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'topSites',
  },
  [ChromeApi.TTS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'tts',
  },
  [ChromeApi.TTS_ENGINE]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'ttsEngine',
  },
  [ChromeApi.TYPES]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['all'],
    namespace: 'types',
  },
  [ChromeApi.USER_SCRIPTS]: {
    minChromeVersion: 120,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'userScripts',
  },
  [ChromeApi.VPN_PROVIDER]: {
    minChromeVersion: 43,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'vpnProvider',
  },
  [ChromeApi.WALLPAPER]: {
    minChromeVersion: 43,
    platform: 'chromeos',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'wallpaper',
  },
  [ChromeApi.WEB_AUTHENTICATION_PROXY]: {
    minChromeVersion: 115,
    platform: 'all',
    channel: 'stable',
    manifestVersions: [3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'webAuthenticationProxy',
  },
  [ChromeApi.WEB_NAVIGATION]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'webNavigation',
  },
  [ChromeApi.WEB_REQUEST]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'webRequest',
  },
  [ChromeApi.WINDOWS]: {
    platform: 'all',
    channel: 'stable',
    manifestVersions: [2, 3],
    requiresPolicy: false,
    foregroundOnly: false,
    contexts: ['background'],
    namespace: 'windows',
  },
} as const satisfies Record<ChromeApi, ChromeApiMetadata>;

/**
 * Helper function to check if an API is available in the current context
 */
export function isApiAvailable(
  api: ChromeApi,
  context: ChromeContext,
  manifestVersion: 2 | 3,
  platform: ChromePlatform = 'all',
  chromeVersion?: number
): boolean {
  const metadata = CHROME_API_REGISTRY[api];

  // Check context
  // @ts-expect-error - this is a hack to get the type to work
  if (!metadata.contexts.includes(context) && !metadata.contexts.includes('all')) {
    return false;
  }

  // Check manifest version
  // @ts-expect-error - this is a hack to get the type to work
  if (!metadata.manifestVersions.includes(manifestVersion)) {
    return false;
  }

  // Check platform
  if (metadata.platform !== 'all' && metadata.platform !== platform) {
    return false;
  }

  // @ts-expect-error - this is a hack to get the type to work
  // Check Chrome version
  if (metadata.minChromeVersion && chromeVersion && chromeVersion < metadata.minChromeVersion) {
    return false;
  }

  return true;
}

/**
 * Get the Chrome API object reference by API enum
 */
export function getChromeApiReference(api: ChromeApi): any {
  const metadata = CHROME_API_REGISTRY[api];
  const parts = metadata.namespace.split('.');

  let ref: any = chrome;
  for (const part of parts) {
    ref = ref?.[part];
    if (!ref) return undefined;
  }

  return ref;
}

/**
 * Get all available APIs for a given context and manifest version
 */
export function getAvailableApis(
  context: ChromeContext,
  manifestVersion: 2 | 3,
  platform: ChromePlatform = 'all',
  chromeVersion?: number
): ChromeApi[] {
  return Object.values(ChromeApi).filter((api) =>
    isApiAvailable(api, context, manifestVersion, platform, chromeVersion)
  );
}
